// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using LinkiedInWebApi.Domain.Entity;
using Microsoft.EntityFrameworkCore;

namespace LinkiedInWebApi.Domain;

public partial class LinkedInDbContext : DbContext
{
    public LinkedInDbContext(DbContextOptions<LinkedInDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Advertisement> Advertisements { get; set; }

    public virtual DbSet<AdvertisementApply> AdvertisementApplies { get; set; }

    public virtual DbSet<AdvertisementJobType> AdvertisementJobTypes { get; set; }

    public virtual DbSet<AdvertismentProfessionalBranch> AdvertismentProfessionalBranches { get; set; }

    public virtual DbSet<AdvertismentWorkingLocation> AdvertismentWorkingLocations { get; set; }

    public virtual DbSet<Chat> Chats { get; set; }

    public virtual DbSet<ChatMessage> ChatMessages { get; set; }

    public virtual DbSet<ContactRequest> ContactRequests { get; set; }

    public virtual DbSet<Post> Posts { get; set; }

    public virtual DbSet<PostComment> PostComments { get; set; }

    public virtual DbSet<PostMultimedia> PostMultimedia { get; set; }

    public virtual DbSet<PostReaction> PostReactions { get; set; }

    public virtual DbSet<RfdtEducationType> RfdtEducationTypes { get; set; }

    public virtual DbSet<RfdtJobType> RfdtJobTypes { get; set; }

    public virtual DbSet<RfdtProfessionalBranch> RfdtProfessionalBranches { get; set; }

    public virtual DbSet<RfdtReaction> RfdtReactions { get; set; }

    public virtual DbSet<RfdtWorkingLocation> RfdtWorkingLocations { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserCv> UserCvs { get; set; }

    public virtual DbSet<UserCvfile> UserCvfiles { get; set; }

    public virtual DbSet<UserEducation> UserEducations { get; set; }

    public virtual DbSet<UserEducationProfessionalBranch> UserEducationProfessionalBranches { get; set; }

    public virtual DbSet<UserExperience> UserExperiences { get; set; }

    public virtual DbSet<UserExperienceJobType> UserExperienceJobTypes { get; set; }

    public virtual DbSet<UserExperienceWorkingLocation> UserExperienceWorkingLocations { get; set; }

    public virtual DbSet<UserExpirienceProfessionalBranch> UserExpirienceProfessionalBranches { get; set; }

    public virtual DbSet<UserPassword> UserPasswords { get; set; }

    public virtual DbSet<UserPhotoProfile> UserPhotoProfiles { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Advertisement>(entity =>
        {
            entity.ToTable("Advertisement");

            entity.Property(e => e.FreeTxt)
                .IsRequired()
                .HasMaxLength(4000);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Creator).WithMany(p => p.Advertisements)
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Advertisement_User");
        });

        modelBuilder.Entity<AdvertisementApply>(entity =>
        {
            entity.ToTable("AdvertisementApply");

            entity.HasOne(d => d.Advertisment).WithMany(p => p.AdvertisementApplies)
                .HasForeignKey(d => d.AdvertismentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdvertisementApply_Advertisement");

            entity.HasOne(d => d.User).WithMany(p => p.AdvertisementApplies)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdvertisementApply_User");
        });

        modelBuilder.Entity<AdvertisementJobType>(entity =>
        {
            entity.ToTable("AdvertisementJobType");

            entity.HasOne(d => d.Advertisement).WithMany(p => p.AdvertisementJobTypes)
                .HasForeignKey(d => d.AdvertisementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdvertisementJobType_Advertisement1");

            entity.HasOne(d => d.Type).WithMany(p => p.AdvertisementJobTypes)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdvertisementJobType_RFDT_JobType1");
        });

        modelBuilder.Entity<AdvertismentProfessionalBranch>(entity =>
        {
            entity.ToTable("AdvertismentProfessionalBranch");

            entity.HasOne(d => d.Advertisment).WithMany(p => p.AdvertismentProfessionalBranches)
                .HasForeignKey(d => d.AdvertismentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdvertismentProfessionalBranch_Advertisement");

            entity.HasOne(d => d.Type).WithMany(p => p.AdvertismentProfessionalBranches)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdvertismentProfessionalBranch_RFDT_ProfessionalBranch");
        });

        modelBuilder.Entity<AdvertismentWorkingLocation>(entity =>
        {
            entity.ToTable("AdvertismentWorkingLocation");

            entity.HasOne(d => d.Advertisement).WithMany(p => p.AdvertismentWorkingLocations)
                .HasForeignKey(d => d.AdvertisementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdvertismentWorkingLocation_Advertisement1");

            entity.HasOne(d => d.Type).WithMany(p => p.AdvertismentWorkingLocations)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdvertismentWorkingLocation_RFDT_WorkingLocation1");
        });

        modelBuilder.Entity<Chat>(entity =>
        {
            entity.ToTable("Chat");

            entity.HasOne(d => d.UserId1Navigation).WithMany(p => p.ChatUserId1Navigations)
                .HasForeignKey(d => d.UserId1)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Chat_User");

            entity.HasOne(d => d.UserId2Navigation).WithMany(p => p.ChatUserId2Navigations)
                .HasForeignKey(d => d.UserId2)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Chat_User1");
        });

        modelBuilder.Entity<ChatMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Message");

            entity.ToTable("ChatMessage");

            entity.Property(e => e.FreeTxt)
                .IsRequired()
                .HasMaxLength(200);

            entity.HasOne(d => d.Chat).WithMany(p => p.ChatMessages)
                .HasForeignKey(d => d.ChatId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ChatMessage_Chat");
        });

        modelBuilder.Entity<ContactRequest>(entity =>
        {
            entity.ToTable("ContactRequest");

            entity.HasOne(d => d.UserRequest).WithMany(p => p.ContactRequestUserRequests)
                .HasForeignKey(d => d.UserRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContactRequest_User1");

            entity.HasOne(d => d.UserResiver).WithMany(p => p.ContactRequestUserResivers)
                .HasForeignKey(d => d.UserResiverId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContactRequest_User");
        });

        modelBuilder.Entity<Post>(entity =>
        {
            entity.ToTable("Post");

            entity.Property(e => e.FreeTxt)
                .IsRequired()
                .HasMaxLength(1000)
                .IsFixedLength();

            entity.HasOne(d => d.Creator).WithMany(p => p.Posts)
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Post_User");
        });

        modelBuilder.Entity<PostComment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Comment");

            entity.ToTable("PostComment");

            entity.Property(e => e.FreeTxt)
                .IsRequired()
                .HasMaxLength(200);

            entity.HasOne(d => d.Creator).WithMany(p => p.PostComments)
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Comment_User");

            entity.HasOne(d => d.Post).WithMany(p => p.PostComments)
                .HasForeignKey(d => d.PostId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Comment_Post");
        });

        modelBuilder.Entity<PostMultimedia>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_PostPhoto");

            entity.Property(e => e.DataOfFile).IsRequired();
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(1000);

            entity.HasOne(d => d.Post).WithMany(p => p.PostMultimedia)
                .HasForeignKey(d => d.PostId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PostPhoto_Post");
        });

        modelBuilder.Entity<PostReaction>(entity =>
        {
            entity.ToTable("PostReaction");

            entity.HasOne(d => d.Post).WithMany(p => p.PostReactions)
                .HasForeignKey(d => d.PostId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PostReaction_Post");

            entity.HasOne(d => d.User).WithMany(p => p.PostReactions)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PostReaction_User");
        });

        modelBuilder.Entity<RfdtEducationType>(entity =>
        {
            entity.ToTable("RFDT_EducationType");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<RfdtJobType>(entity =>
        {
            entity.ToTable("RFDT_JobType");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<RfdtProfessionalBranch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ProfessionalBranch");

            entity.ToTable("RFDT_ProfessionalBranch");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<RfdtReaction>(entity =>
        {
            entity.ToTable("RFDT_Reaction");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.DataOfFile).IsRequired();
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<RfdtWorkingLocation>(entity =>
        {
            entity.ToTable("RFDT_WorkingLocation");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User");

            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Surname)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<UserCv>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_CV");

            entity.ToTable("UserCV");

            entity.Property(e => e.DataOfFile).IsRequired();
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(250);

            entity.HasOne(d => d.User).WithMany(p => p.UserCvs)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CV_User");
        });

        modelBuilder.Entity<UserCvfile>(entity =>
        {
            entity.ToTable("UserCVFile");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.DateOfFile).IsRequired();
            entity.Property(e => e.UserCvid).HasColumnName("UserCVId");

            entity.HasOne(d => d.UserCv).WithMany(p => p.UserCvfiles)
                .HasForeignKey(d => d.UserCvid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserCVFile_User");
        });

        modelBuilder.Entity<UserEducation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Education");

            entity.ToTable("UserEducation");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.EducationType).WithMany(p => p.UserEducations)
                .HasForeignKey(d => d.EducationTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserEducation_RFDT_EducationType");

            entity.HasOne(d => d.User).WithMany(p => p.UserEducations)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Education_User");
        });

        modelBuilder.Entity<UserEducationProfessionalBranch>(entity =>
        {
            entity.ToTable("UserEducationProfessionalBranch");

            entity.HasOne(d => d.ProfessionalBranch).WithMany(p => p.UserEducationProfessionalBranches)
                .HasForeignKey(d => d.ProfessionalBranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserEducationProfessionalBranch_ProfessionalBranch");

            entity.HasOne(d => d.UserEducation).WithMany(p => p.UserEducationProfessionalBranches)
                .HasForeignKey(d => d.UserEducationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserEducationProfessionalBranch_UserEducation");
        });

        modelBuilder.Entity<UserExperience>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Experience");

            entity.ToTable("UserExperience");

            entity.Property(e => e.FreeTxt)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.User).WithMany(p => p.UserExperiences)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Experience_User");
        });

        modelBuilder.Entity<UserExperienceJobType>(entity =>
        {
            entity.ToTable("UserExperienceJobType");

            entity.HasOne(d => d.Type).WithMany(p => p.UserExperienceJobTypes)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserExperienceJobType_RFDT_JobType");

            entity.HasOne(d => d.UserExpirience).WithMany(p => p.UserExperienceJobTypes)
                .HasForeignKey(d => d.UserExpirienceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserExperienceJobType_UserExperience");
        });

        modelBuilder.Entity<UserExperienceWorkingLocation>(entity =>
        {
            entity.ToTable("UserExperienceWorkingLocation");

            entity.HasOne(d => d.Type).WithMany(p => p.UserExperienceWorkingLocations)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserExperienceWorkingLocation_RFDT_WorkingLocation1");

            entity.HasOne(d => d.UserExperience).WithMany(p => p.UserExperienceWorkingLocations)
                .HasForeignKey(d => d.UserExperienceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserExperienceWorkingLocation_UserExperience");
        });

        modelBuilder.Entity<UserExpirienceProfessionalBranch>(entity =>
        {
            entity.ToTable("UserExpirienceProfessionalBranch");

            entity.HasOne(d => d.Type).WithMany(p => p.UserExpirienceProfessionalBranches)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserExpirienceProfessionalBranch_RFDT_ProfessionalBranch");

            entity.HasOne(d => d.UserExperience).WithMany(p => p.UserExpirienceProfessionalBranches)
                .HasForeignKey(d => d.UserExperienceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserExpirienceProfessionalBranch_UserExperience");
        });

        modelBuilder.Entity<UserPassword>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_UserPassworld");

            entity.ToTable("UserPassword");

            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(250);

            entity.HasOne(d => d.User).WithMany(p => p.UserPasswords)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserPassworld_User");
        });

        modelBuilder.Entity<UserPhotoProfile>(entity =>
        {
            entity.ToTable("UserPhotoProfile");

            entity.Property(e => e.DataOfFile).IsRequired();
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(1000);

            entity.HasOne(d => d.User).WithMany(p => p.UserPhotoProfiles)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserPhotoProfile_User");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}